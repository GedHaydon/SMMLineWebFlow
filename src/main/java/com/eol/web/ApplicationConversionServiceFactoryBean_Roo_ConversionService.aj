// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.eol.web;

import com.eol.maintenance.domain.SMMGroup;
import com.eol.maintenance.domain.SoftwareVersion;
import com.eol.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<SMMGroup, String> ApplicationConversionServiceFactoryBean.getSMMGroupToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.eol.maintenance.domain.SMMGroup, java.lang.String>() {
            public String convert(SMMGroup sMMGroup) {
                return new StringBuilder().append(sMMGroup.getUuid()).toString();
            }
        };
    }
    
    public Converter<Long, SMMGroup> ApplicationConversionServiceFactoryBean.getIdToSMMGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.eol.maintenance.domain.SMMGroup>() {
            public com.eol.maintenance.domain.SMMGroup convert(java.lang.Long id) {
                return SMMGroup.findSMMGroup(id);
            }
        };
    }
    
    public Converter<String, SMMGroup> ApplicationConversionServiceFactoryBean.getStringToSMMGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.eol.maintenance.domain.SMMGroup>() {
            public com.eol.maintenance.domain.SMMGroup convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), SMMGroup.class);
            }
        };
    }
    
    public Converter<SoftwareVersion, String> ApplicationConversionServiceFactoryBean.getSoftwareVersionToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.eol.maintenance.domain.SoftwareVersion, java.lang.String>() {
            public String convert(SoftwareVersion softwareVersion) {
                return new StringBuilder().append(softwareVersion.getDtype()).append(' ').append(softwareVersion.getMajorVersion()).append(' ').append(softwareVersion.getMinorVersion()).append(' ').append(softwareVersion.getUuid()).toString();
            }
        };
    }
    
    public Converter<Long, SoftwareVersion> ApplicationConversionServiceFactoryBean.getIdToSoftwareVersionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.eol.maintenance.domain.SoftwareVersion>() {
            public com.eol.maintenance.domain.SoftwareVersion convert(java.lang.Long id) {
                return SoftwareVersion.findSoftwareVersion(id);
            }
        };
    }
    
    public Converter<String, SoftwareVersion> ApplicationConversionServiceFactoryBean.getStringToSoftwareVersionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.eol.maintenance.domain.SoftwareVersion>() {
            public com.eol.maintenance.domain.SoftwareVersion convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), SoftwareVersion.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getSMMGroupToStringConverter());
        registry.addConverter(getIdToSMMGroupConverter());
        registry.addConverter(getStringToSMMGroupConverter());
        registry.addConverter(getSoftwareVersionToStringConverter());
        registry.addConverter(getIdToSoftwareVersionConverter());
        registry.addConverter(getStringToSoftwareVersionConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
